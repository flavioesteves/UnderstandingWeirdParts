Functions and Objects
#30 - Objects and dots (memory)
- Objects have property and methods(functions)

#31 - Objects and objects literals
#32 - Framework Aside: faking Namespaces - REVIEW 
#33
#34- First Class Functions 
   - Everything you can do with other types you can do with functions you can do with functions.
   - Assign them to variables, pass them around, create them on the fly.
   - Function is a object - A special type of object.
   ---> Primitive
   ---> Object
   ---> Function
   --->(Important) NAME optional, can be anonymous
   --->(Important) CODE "Invocable" ()
#35 - Function Statements And Function Expressions
    - Expression: A unit of code that results in a value: It doesn't have to save a variable.

#36 - Conceptual Aside: By Value vs By Reference
    - "Immutable" means it can't be changed.

#37 - Objects, Functions and 'this'
    - Execution Context is Created (Creation Phase)
    - Variable Environment
    - 'this'
    - Outer Environment

#38 - Conceptual Aside Arrays colections of anything
#39 - 'arguments' and spread
    - ARGUMENTS: The Parameters you pass to a function

#40 - Framework Aside - Function Overloading
#41 - Conceptual Aside - Syntax Parsers
#42 - Dangerous Aside: Automatic Semicolon Insertion
#43 - Framework Aside - Whitespace: Invisible Characters that create literal 'space' in your written code 
    - Carriage returns, tabs, spaces.
#44 - Immediately Invoked Function expressions (IIFE)S
#45 - IIFEs and Safe Code
#46 - Understanding Closures Part 1 (Important)
#47 - Understanding Closures Part 2 (Important)
#48 - Framework Aside: Function Factories (Important)
#49 - Closures and Callbacks (Important)
#50 - Call(), Apply() and Bind()
    - Function Borrowing 
    - Function Currying
#51 - Functional Programming